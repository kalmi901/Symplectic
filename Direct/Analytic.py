import numpy as np


def anal_solve(A: np.array, b: np.array):
	n = len(A)
	if (n == 1):
		return np.array(b[0] / A[0] )
	elif (n == 2):
		return __solve2x2(A, b)
	elif (n == 3):
		return __solve3x3(A, b)
	elif (n == 4):
		return __solve4x4(A, b)
	else:
		print("Analytic solver for (" + str(n) + " x " + str(n) + " ) matrix is not available")
		return None
		

def __solve2x2(A, b):
	x = np.zeros([2])
	rD = 1 / ( A[0, 0]*A[1, 1] - A[0, 1] * A[1, 0] )
	
	x[0] = ( A[1, 1] * b[0] - A[0, 1] * b[1] ) * rD
	x[1] = (-A[1, 0] * b[0] + A[0, 0] * b[1] ) * rD
	return x
	

def __solve3x3(A, b):
	x = np.zeros([3])
	rD = 1 / ( A[0, 0] * A[1, 1] * A[2, 2] - A[0, 0] * A[1, 2] * A[2, 1] \
			 - A[0, 1] * A[1, 0] * A[2, 2] + A[0, 1] * A[1, 2] * A[2, 0] \
			 + A[0, 2] * A[1, 0] * A[2, 1] - A[0, 2] * A[1, 1] * A[2, 0] )

	x[0] = ( ( A[1, 1] * A[2, 2] - A[1, 2] * A[2, 1] ) * b[0] + \
			 ( A[0, 2] * A[2, 1] - A[0, 1] * A[2, 2] ) * b[1] + \
			 ( A[0, 1] * A[1, 2] - A[0, 2] * A[1, 1] ) * b[2] ) * rD
	x[1] = ( ( A[1, 2] * A[2, 0] - A[1, 0] * A[2, 2] ) * b[0] + \
			 ( A[0, 0] * A[2, 2] - A[0, 2] * A[2, 0] ) * b[1] + \
			 ( A[0, 2] * A[1, 0] - A[0, 0] * A[1, 2] ) * b[2] ) * rD
	x[2] = ( ( A[1, 0] * A[2, 1] - A[1, 1] * A[2, 0] ) * b[0] + \
			 ( A[0, 1] * A[2, 0] - A[0, 0] * A[2, 1] ) * b[1] + \
			 ( A[0, 0] * A[1, 1] - A[0, 1] * A[1, 0] ) * b[2] ) * rD
	
	return x
	
	
def __solve4x4(A, b):
	x = np.zeros([4])
	rD = 1 / (A[0, 0] * A[1, 1] * A[2, 2] * A[3, 3] - A[0, 0] * A[1, 1] * A[2, 3] * A[3, 2] \
			- A[0, 0] * A[1, 2] * A[2, 1] * A[3, 3] + A[0, 0] * A[1, 2] * A[2, 3] * A[3, 1] \
			+ A[0, 0] * A[1, 3] * A[2, 1] * A[3, 2] - A[0, 0] * A[1, 3] * A[2, 2] * A[3, 1] \
			- A[0, 1] * A[1, 0] * A[2, 2] * A[3, 3] + A[0, 1] * A[1, 0] * A[2, 3] * A[3, 2] \
			+ A[0, 1] * A[1, 2] * A[2, 0] * A[3, 3] - A[0, 1] * A[1, 2] * A[2, 3] * A[3, 0] \
			- A[0, 1] * A[1, 3] * A[2, 0] * A[3, 2] + A[0, 1] * A[1, 3] * A[2, 2] * A[3, 0] \
			+ A[0, 2] * A[1, 0] * A[2, 1] * A[3, 3] - A[0, 2] * A[1, 0] * A[2, 3] * A[3, 1] \
			- A[0, 2] * A[1, 1] * A[2, 0] * A[3, 3] + A[0, 2] * A[1, 1] * A[2, 3] * A[3, 0] \
			+ A[0, 2] * A[1, 3] * A[2, 0] * A[3, 1] - A[0, 2] * A[1, 3] * A[2, 1] * A[3, 0] \
			- A[0, 3] * A[1, 0] * A[2, 1] * A[3, 2] + A[0, 3] * A[1, 0] * A[2, 2] * A[3, 1] \
			+ A[0, 3] * A[1, 1] * A[2, 0] * A[3, 2] - A[0, 3] * A[1, 1] * A[2, 2] * A[3, 0] \
			- A[0, 3] * A[1, 2] * A[2, 0] * A[3, 1] + A[0, 3] * A[1, 2] * A[2, 1] * A[3, 0] )
			

	x[0] = ( ( A[1, 1] * A[2, 2] * A[3, 3] - A[1, 1] * A[2, 3] * A[3, 2] \
			 - A[1, 2] * A[2, 1] * A[3, 3] + A[1, 2] * A[2, 3] * A[3, 1] \
			 + A[1, 3] * A[2, 1] * A[3, 2] - A[1, 3] * A[2, 2] * A[3, 1] ) * b[0] + \
			 (-A[0, 1] * A[2, 2] * A[3, 3] + A[0, 1] * A[2, 3] * A[3, 2] \
			 + A[0, 2] * A[2, 1] * A[3, 3] - A[0, 2] * A[2, 3] * A[3, 1] \
			 - A[0, 3] * A[2, 1] * A[3, 2] + A[0, 3] * A[2, 2] * A[3, 1] ) * b[1] + \
			 ( A[0, 1] * A[1, 2] * A[3, 3] - A[0, 1] * A[1, 3] * A[3, 2] \
			 - A[0, 2] * A[1, 1] * A[3, 3] + A[0, 2] * A[1, 3] * A[3, 1] \
			 + A[0, 3] * A[1, 1] * A[3, 2] - A[0, 3] * A[1, 2] * A[3, 1] ) * b[2] + \
			 (-A[0, 1] * A[1, 2] * A[2, 3] + A[0, 1] * A[1, 3] * A[2, 2] \
			 + A[0, 2] * A[1, 1] * A[2, 3] - A[0, 2] * A[1, 3] * A[2, 1] \
			 - A[0, 3] * A[1, 1] * A[2, 2] + A[0, 3] * A[1, 2] * A[2, 1] ) * b[3] ) * rD
	x[1] = ( (-A[1, 0] * A[2, 2] * A[3, 3] + A[1, 0] * A[2, 3] * A[3, 2] \
			 + A[1, 2] * A[2, 0] * A[3, 3] - A[1, 2] * A[2, 3] * A[3, 0] \
			 - A[1, 3] * A[2, 0] * A[3, 2] + A[1, 3] * A[2, 2] * A[3, 0] ) * b[0] + \
			 ( A[0, 0] * A[2, 2] * A[3, 3] - A[0, 0] * A[2, 3] * A[3, 2] \
			 - A[0, 2] * A[2, 0] * A[3, 3] + A[0, 2] * A[2, 3] * A[3, 0] \
			 + A[0, 3] * A[2, 0] * A[3, 2] - A[0, 3] * A[2, 2] * A[3, 0] ) * b[1] + \
			 (-A[0, 0] * A[1, 2] * A[3, 3] + A[0, 0] * A[1, 3] * A[3, 2] \
			 + A[0, 2] * A[1, 0] * A[3, 3] - A[0, 2] * A[1, 3] * A[3, 0] \
			 - A[0, 3] * A[1, 0] * A[3, 2] + A[0, 3] * A[1, 2] * A[3, 0] ) * b[2] + \
			 ( A[0, 0] * A[1, 2] * A[2, 3] - A[0, 0] * A[1, 3] * A[2, 2] \
			 - A[0, 2] * A[1, 0] * A[2, 3] + A[0, 2] * A[1, 3] * A[2, 0] \
			 + A[0, 3] * A[1, 0] * A[2, 2] - A[0, 3] * A[1, 2] * A[2, 0] ) * b[3] ) * rD
	x[2] = ( ( A[1, 0] * A[2, 1] * A[3, 3] - A[1, 0] * A[2, 3] * A[3, 1] \
			 - A[1, 1] * A[2, 0] * A[3, 3] + A[1, 1] * A[2, 3] * A[3, 0] \
			 + A[1, 3] * A[2, 0] * A[3, 1] - A[1, 3] * A[2, 1] * A[3, 0] ) * b[0] + \
			 (-A[0, 0] * A[2, 1] * A[3, 3] + A[0, 0] * A[2, 3] * A[3, 1] \
			 + A[0, 1] * A[2, 0] * A[3, 3] - A[0, 1] * A[2, 3] * A[3, 0] \
			 - A[0, 3] * A[2, 0] * A[3, 1] + A[0, 3] * A[2, 1] * A[3, 0] ) * b[1] + \
			 ( A[0, 0] * A[1, 1] * A[3, 3] - A[0, 0] * A[1, 3] * A[3, 1] \
			 - A[0, 1] * A[1, 0] * A[3, 3] + A[0, 1] * A[1, 3] * A[3, 0] \
			 + A[0, 3] * A[1, 0] * A[3, 1] - A[0, 3] * A[1, 1] * A[3, 0] ) * b[2] + \
			 (-A[0, 0] * A[1, 1] * A[2, 3] + A[0, 0] * A[1, 3] * A[2, 1] \
			 + A[0, 1] * A[1, 0] * A[2, 3] - A[0, 1] * A[1, 3] * A[2, 0] \
			 - A[0, 3] * A[1, 0] * A[2, 1] + A[0, 3] * A[1, 1] * A[2, 0] ) * b[3] ) * rD
	x[3] = ( (-A[1, 0] * A[2, 1] * A[3, 2] + A[1, 0] * A[2, 2] * A[3, 1] \
			 + A[1, 1] * A[2, 0] * A[3, 2] - A[1, 1] * A[2, 2] * A[3, 0] \
			 - A[1, 2] * A[2, 0] * A[3, 1] + A[1, 2] * A[2, 1] * A[3, 0] ) * b[0] + \
			 ( A[0, 0] * A[2, 1] * A[3, 2] - A[0, 0] * A[2, 2] * A[3, 1] \
			 - A[0, 1] * A[2, 0] * A[3, 2] + A[0, 1] * A[2, 2] * A[3, 0] \
			 + A[0, 2] * A[2, 0] * A[3, 1] - A[0, 2] * A[2, 1] * A[3, 0] ) * b[1] + \
			 (-A[0, 0] * A[1, 1] * A[3, 2] + A[0, 0] * A[1, 2] * A[3, 1] \
			 + A[0, 1] * A[1, 0] * A[3, 2] - A[0, 1] * A[1, 2] * A[3, 0] \
			 - A[0, 2] * A[1, 0] * A[3, 1] + A[0, 2] * A[1, 1] * A[3, 0] ) * b[2] + \
			 ( A[0, 0] * A[1, 1] * A[2, 2] - A[0, 0] * A[1, 2] * A[2, 1] \
			 - A[0, 1] * A[1, 0] * A[2, 2] + A[0, 1] * A[1, 2] * A[2, 0] \
			 + A[0, 2] * A[1, 0] * A[2, 1] - A[0, 2] * A[1, 1] * A[2, 0] ) * b[3] ) * rD


	return x